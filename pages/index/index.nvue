<template>
  <view class="content">
    <image class="background bg-img-1" src="@/static/background.png" mode="scaleToFill" />
    <header-title :title="settingStore.textConfig.topTitle" />
    <view class="centre-box">
      <content-box class="test">
        <calendar-flow :data="calendar_flow_data" :title="settingStore.textConfig.leftTitle" />
      </content-box>
      <real-time class="test-1" :number="scop_data.current_count" :total="scop_data.total_count"
        :title="settingStore.textConfig.centre.title" :text="settingStore.textConfig.centre.text" />
      <content-box class="test">
        <recent-flow :data="recent_flow_data" :title="settingStore.textConfig.rightTitle" />
      </content-box>
    </view>
    <view class="bottom-box">
      <content-box class="bt">
        <minutes-flow :data="minutes_flow_data" :title="settingStore.textConfig.bottomTitle" />
      </content-box>
    </view>
  </view>
</template>

<script setup lang="ts">
  import { ref } from 'vue';
  import { onUnload, onLoad } from '@dcloudio/uni-app';

  // 组件
  import HeaderTitle from '@/component/HeaderTitle.nvue';
  import ContentBox from '@/component/ContentBox.nvue';
  import RecentFlow from '@/component/RecentFlow.nvue';
  import MinutesFlow from '@/component/MinutesFlow.nvue';
  import CalendarFlow from '@/component/CalendarFlow.nvue';
  import RealTime from '@/component/RealTime.nvue';

  // 解码器
  import {
    TextDecoder
  } from 'text-decoding';

  import { useSettingStore } from '@/utils/store'

  // MQTT
  import {
    mqtt_connect,
    mqtt_disconnect
  } from '@/utils/myMqtt.js'

  // api
  import {
    update_minutes_flow_data,
    update_recent_flow_data,
    update_calendar_flow_data
  } from '@/utils/api/interface.js';

  // 相机id
  var cameraId : string = '1686676270546554881';
  // mqtt客户端
  var client = null;

  // 保存定时器
  const timers = {
    minutes: null,
    recent: null,
    calendar: null
  }

  const settingStore = useSettingStore()

  // 整合数据
  const scop_data = ref({
    current_count: 0,
    total_count: 0,
    data: [{
      in_count: 0,
      out_count: 0
    },
    {
      in_count: 0,
      out_count: 0
    }
    ],
  })

  // 解码器
  const decoder = new TextDecoder('utf-8');

  function safe_check(options : any) : boolean {
    if (options) {
      if (options.cameraId) {
        console.log('更新 cameraId: ', options.cameraId);
        cameraId = options.cameraId;
        return true;
      }
    }
    return false;
  }

  onLoad((options : { cameraId : string }) => {
    // 选择店铺界面传参
    if (!safe_check(options)) {
      console.warn("传参错误");
      return;
    }

    // 捕获返回按钮，免得推出程序
    plus.key.removeEventListener('backbutton', () => { });
    // 捕获返回按钮，免得推出程序
    plus.key.addEventListener('backbutton', uni.navigateBack, false);
    // 连接mqtt
    client = mqtt_connect(client);

    client.on('message', (topic : any, message : any) => {
      try {
        const data = JSON.parse(decoder.decode(message));
        console.log(`topic: ${topic}\tmessage: `, data);

        const cam = data.cam;
        if (cam === undefined) {
          console.error('没有相机');
          return;
        }

        // 是否有变化
        let change_flag = false;
        if (cam.camera_id === cameraId) {
          change_flag = true;

          scop_data.value.data[0].in_count = data.in_count;
          scop_data.value.data[0].out_count = data.out_count;
        } else if (cam.camera_id === '1686676270546554882') {
          change_flag = true;
          scop_data.value.data[1].in_count = data.in_count;
          scop_data.value.data[1].out_count = data.out_count;
        } else {
          // console.log("其他: ", cam.camera_id);
          // console.log("this.currentCameraId === ", this.currentCameraId);
        }
        // 判断有没有变化
        if (change_flag) {
          scop_data.value.total_count = scop_data.value.data[0].in_count + scop_data.value.data[1].in_count;
          scop_data.value.current_count = scop_data.value.total_count - scop_data.value.data[0].out_count - scop_data.value.data[1].out_count;
          // 当前人数小于0，取0
          if (scop_data.value.current_count < 0) {
            scop_data.value.current_count = 0;
          }
        }
      } catch (e) {
        //TODO handle the exception
        console.error("json 解析失败 ", e);
      }
    });
  });

  onUnload(() => {
    // 断开mqtt
    try {
      mqtt_disconnect(client);
    } catch (e) {
      console.error('mqtt_disconnect error: ', e);
    }

    // 移除拦截返回按钮
    plus.key.removeEventListener('backbutton', uni.navigateBack);
    // 清除定时器
    if (timers.minutes !== null) {
      clearInterval(timers.minutes);
    }
    if (timers.recent !== null) {
      clearInterval(timers.recent);
    }
    if (timers.calendar !== null) {
      clearInterval(timers.calendar);
    }
  });

  // 下图的数据
  const minutes_flow_data = ref(null);
  // 近期客流数据
  const recent_flow_data = ref(null);
  // 左图数据
  const calendar_flow_data = ref(null);

  // 封装
  function update_minutes_flow_data_func() {
    update_minutes_flow_data(cameraId).then((data) => {
      // console.log("minutes_flow_data = ", data);
      minutes_flow_data.value = data;
    });
  }
  function update_recent_flow_data_func() {
    update_recent_flow_data(cameraId).then((data) => {
      // console.log("recent_flow_data = ", data);
      recent_flow_data.value = data;
    });
  }
  function update_calendar_flow_data_func() {
    update_calendar_flow_data(cameraId).then((data) => {
      // console.log("update_calendar_flow_data = ", data);
      calendar_flow_data.value = data;
    });
  }

  // 初始化数据
  update_minutes_flow_data_func();
  update_recent_flow_data_func();
  update_calendar_flow_data_func();
  // 定时刷新
  timers.minutes = setInterval(update_minutes_flow_data_func, 10 * 60 * 1000);
  timers.recent = setInterval(update_recent_flow_data_func, 10 * 60 * 1000);
  timers.calendar = setInterval(update_calendar_flow_data_func, 10 * 60 * 1000);
</script>

<style scoped>
  .content {
    display: flex;
    flex-direction: column;
    width: 962px;
    height: 542px;
  }

  .background {
    position: absolute;
    z-index: -2;
  }

  .bg-img-1 {
    top: 0;
    left: 0;
    width: 962px;
    height: 542px;
  }

  .centre-box {
    margin: 0 10px 0;
    display: flex;
    flex-direction: row;
  }

  .test-1 {
    width: 340px;
    height: 290px;
    padding: 0 20px 0;
  }

  .test {
    width: 300px;
    height: 290px;
  }

  .bottom-box {
    margin: 10px;
  }

  .bt {
    width: 938px;
    height: 172px;
  }
</style>